---
- name: test out the laps_password lookup plugin
  hosts: localhost
  gather_facts: no
  vars:
    host: child01
    kdc: dc01.{{ domain_dns_name }}
    cacert: '{{ playbook_dir }}/cert-temp/ca.pem'

  tasks:
  - name: make sure we have cleared out all Kerberos tickets so we start from scratch
    command: kdestroy
    ignore_errors: True

  - name: get password using simple auth over LDAPS
    set_fact:
      expected: "{{ lookup('laps_password', host, domain=kdc, scheme='ldaps', auth='simple', username=domain_user_upn, password=domain_pass, cacert_file=cacert) }}"

  - name: make sure we can connect using the LAPS password
    win_ping:
    delegate_to: child
    vars:
      ansible_user: Administrator
      ansible_password: '{{ expected }}'

  # Need to make sure we have a valid ticket before running gssapi test
  - name: get Kerberos ticket
    expect:
      command: kinit {{ domain_user_upn }}
      responses:
        (?i)password: '{{ domain_pass }}'

  # Now that we know LAPS is configured correctly we can try the various permutations
  - name: get password using simple auth and allow_plaintext
    set_fact:
      actual: "{{ lookup('laps_password', host,
                         domain=kdc,
                         auth='simple',
                         username=domain_user_upn,
                         password=domain_pass,
                         allow_plaintext=True) }}"
    failed_when: actual != expected

  - name: get password using StartTLS
    set_fact:
      actual: "{{ lookup('laps_password', host,
                         domain=kdc,
                         auth='simple',
                         username=domain_user_upn,
                         password=domain_pass,
                         start_tls=True,
                         cacert_file=cacert) }}"
    failed_when: actual != expected

  - name: get password with custom search base
    set_fact:
      actual: "{{ lookup('laps_password', host,
                         domain=kdc,
                         auth='simple',
                         username=domain_user_upn,
                         password=domain_pass,
                         seach_base='OU=' + laps_ou_name + ',' + domain_base_path,
                         scheme='ldaps',
                         cacert_file=cacert) }}"
    failed_when: actual != expected

  - name: get password over TLS and ignoring cert validation
    set_fact:
      actual: "{{ lookup('laps_password', host,
                         domain=kdc,
                         auth='simple',
                         username=domain_user_upn,
                         password=domain_pass,
                         start_tls=True,
                         validate_certs='never') }}"
    failed_when: actual != expected

  - name: get password using implicit gssapi auth
    set_fact:
      actual: "{{ lookup('laps_password', host, domain=kdc) }}"
    failed_when: actual != expected
